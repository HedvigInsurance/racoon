#
# GLOBAL
#

type Query {
  _empty: String
}

type Mutation {
  _empty: String
}

type Product {
  id: ID!
  title: String!
  variants: [ProductVariant!]!
}

type ProductVariant {
  id: ID!
  title: String!
  product: Product!
}

type Money {
  amount: Int!
  currencyCode: CurrencyCode!
}

"""
Represents an ISO 8601-encoded date and time string.
For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is represented as "2019-09-07T15:50:00Z".
"""
scalar DateTime

scalar Date

"""
A JSON object.
"""
scalar JSON

"""
The three-letter currency codes that represent the world currencies used in stores.
These include standard ISO 4217 codes, legacy codes, and non-standard codes.
"""
enum CurrencyCode {
  "Swedish Kronor (SEK)."
  SEK
  "Danish Kroner (DKK)."
  DKK
  "Norwegian Kroner (NOK)."
  NOK
}

enum CountryCode {
  SE
  DK
  NO
}

#
# SHOP SESSION
#

extend type Query {
  shopSession(id: ID!): ShopSession!
}

type ShopSession {
  id: ID!
  countryCode: CountryCode!
  currencyCode: CurrencyCode!
  priceIntents: [PriceIntent!]!
}

extend type Mutation {
  shopSession(id: ID!): ShopSessionMutations!
  shopSessionCreate(input: ShopSessionCreateInput!): ShopSession!
}

type ShopSessionMutations {
  _empty: String
}

input ShopSessionCreateInput {
  countryCode: CountryCode!
}

#
# CART
#

extend type ShopSession {
  cart: Cart!
}

extend type ShopSessionMutations {
  cart: CartMutations!
}

type CartMutations {
  linesAdd(lineIds: [ID!]!): CartLinesAddPayload!
  linesRemove(lineIds: [ID!]!): CartLinesRemovePayload!
  startDateUpdate(input: StartDateUpdateInput!): StartDateUpdatePayload!
}

type Cart {
  id: ID!
  buyerIdentity: CartBuyerIdentity!

  """
  Explanation: https://docs.drupalcommerce.org/commerce1/user-guide/shopping-cart/shopping-carts-orders-and-line-items
  """
  lines: [CartLine!]!
}

type CartBuyerIdentity {
  countryCode: CountryCode!
}

type CartCreatePayload {
  cart: Cart
  userErrors: [CartUserError!]!
}

type CartLinesAddPayload {
  cart: Cart
  userErrors: [CartUserError!]!
}

type CartLinesRemovePayload {
  cart: Cart
  userErrors: [CartUserError!]!
}

input StartDateUpdateInput {
  lineId: ID!
  startDate: Date
}

type StartDateUpdatePayload {
  cart: Cart
  userErrors: [CartUserError!]!
}

type CartUserError {
  "The error code."
  code: CartErrorCode
  "The path to the input field that caused the error."
  field: [String!]
  "The error message."
  message: String!
}

enum CartErrorCode {
  INVALID
}

type CartLine {
  id: ID!
  variant: ProductVariant!
  price: Money!
  startDate: Date
}

#
# Price Intent
#

extend type ShopSession {
  "Get a price intent by its ID."
  priceIntent(id: ID!): PriceIntent
}

extend type ShopSessionMutations {
  "Creates a new price intent."
  priceIntentCreate(input: PriceIntentCreateInput!): PriceIntent!
  priceIntent(id: ID!): PriceIntentMutations!
}

type PriceIntentMutations {
  "Updates user form data."
  dataUpdate(data: JSON!): PriceIntentDataUpdatePayload!
  "Generates line items with price based on user form data."
  confirm: PriceIntentConfirmPayload!
}

type PriceIntent {
  "The id of the price intent."
  id: ID!
  "Submitted user form data."
  data: JSON!
  "Line items added based on the data-field."
  lines: [PriceIntentLine!]
}

type PriceIntentLine {
  "The id of the line item, which can be used to add to cart."
  id: ID!
  "The relevant product variant (tier)."
  variant: ProductVariant!
  "The cost of the product variant."
  price: Money!
}

input PriceIntentCreateInput {
  "The product to calculate price for."
  productId: ID!
}

type PriceIntentUserError {
  "The error code."
  code: PriceIntentErrorCode
  "The path to the input field that caused the error."
  field: [String!]
  "The error message."
  message: String!
}

enum PriceIntentErrorCode {
  "The input value is invalid."
  INVALID
}

type PriceIntentDataUpdatePayload {
  priceIntent: PriceIntent
  userErrors: [PriceIntentUserError!]!
}

type PriceIntentConfirmPayload {
  priceIntent: PriceIntent
  userErrors: [PriceIntentUserError!]!
}

#
# CHECKOUT
#

extend type Query {
  checkout(id: ID!): Checkout
}

extend type Mutation {
  "Creates a new checkout."
  checkoutCreate(input: CheckoutCreateInput!): CheckoutCreatePayload!
  checkoutPersonCreate(
    checkoutId: ID!
    person: CheckoutPersonCreateInput!
  ): CheckoutPersonCreatePayload!
  checkoutCompleteFree(checkoutId: ID!): CheckoutCompleteFreePayload!
  checkoutCompleteWithPayment(
    checkout: ID!
    paymentConnectionId: ID!
  ): CheckoutCompleteWithPaymentPayload!
}

input CheckoutCreateInput {
  buyerIdentity: CheckoutBuyerIdentityInput!
}

input CheckoutBuyerIdentityInput {
  countryCode: CountryCode!
}

type CheckoutCreatePayload {
  "The new checkout object."
  checkout: Checkout
  "The list of errors that occurred from executing the mutation."
  userErrors: [CheckoutUserError!]!
}

"""
Represents an error that happens during execution of a checkout mutation.
"""
type CheckoutUserError {
  "The error code."
  code: CheckoutErrorCode
  "The path to the input field that caused the error."
  field: [String!]
  "The error message."
  message: String!
}

"""
Possible error codes that can be returned by CheckoutUserError.
"""
enum CheckoutErrorCode {
  "The input value is invalid."
  INVALID
}

"""
A container for all the information required to checkout items and pay.
"""
type Checkout {
  id: ID!

  "The date and time when the checkout was completed."
  completedAt: DateTime
  "The date and time when the checkout was created."
  createdAt: DateTime!

  "The currency code for the checkout."
  currencyCode: CurrencyCode!

  buyerIdentity: CheckoutBuyerIdentity!
}

type CheckoutCompleteFreePayload {
  checkout: Checkout
  userErrors: [CheckoutUserError!]!
  memberAccessToken: String
}

type CheckoutCompleteWithPaymentPayload {
  checkout: Checkout
  userErrors: [CheckoutUserError!]!
  memberAccessToken: String
}

input CheckoutPersonCreateInput {
  "The customer's email."
  email: String!
  firstName: String!
  lastName: String!
  personalNumber: String!
}

type CheckoutPersonCreatePayload {
  checkout: Checkout
  userErrors: [CheckoutUserError!]!
}

type CheckoutPerson {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  personalNumber: String!
}

"""
The identity of the customer associated with the checkout.
"""
type CheckoutBuyerIdentity {
  """
  The code designating a country/region, following ISO 3166-1 alpha-2 guidelines.
  """
  countryCode: CountryCode!

  person: CheckoutPerson
}

#
# PAYMENT CONNECTION
#

extend type Query {
  paymentConnection(id: ID!): PaymentConnection
}

extend type Mutation {
  paymentConnectionCreate(input: PaymentConnectionCreateInput!): PaymentConnectionCreatePayload!
  paymentConnectionSubmitRedirection(
    paymentConnectionId: ID!
    input: PaymentConnectionSubmitRedirectionInput!
  ): PaymentConnectionSubmitRedirectionPayload!
  paymentConnectionSubmitAdditionalPaymentDetails(
    paymentConnectionId: ID!
    input: PaymentConnectionSubmitAdditionalPaymentDetailsInput!
  ): PaymentConnectionSubmitAdditionalPaymentDetailsPayload!
  paymentConnectionRegisterDirectDebit(
    paymentConnectionId: ID!
    input: PaymentConnectionRegisterDirectDebitInput!
  ): PaymentConnectionRegisterDirectDebitPayload!
}

type PaymentConnection {
  id: ID!
  providers: [PaymentConnectionProvider!]!
}

type PaymentConnectionProviderAdyen {
  type: PaymentConnectionProviderType
  paymentMethodsResponse: AdyenPaymentMethodsResponse!
}

type PaymentConnectionProviderTrustly {
  type: PaymentConnectionProviderType
}

union PaymentConnectionProvider = PaymentConnectionProviderAdyen | PaymentConnectionProviderTrustly

scalar AdyenPaymentMethodsResponse

enum PaymentConnectionProviderType {
  ADYEN
  TRUSTLY
}

input PaymentConnectionCreateInput {
  countryCode: CountryCode!
}

type PaymentConnectionCreatePayload {
  paymentConnection: PaymentConnection
  userErrors: [PaymentConnectionUserError!]!
}

type PaymentConnectionUserError {
  "The error code."
  code: PaymentConnectionErrorCode
  "The path to the input field that caused the error."
  field: [String!]
  "The error message."
  message: String!
}

enum PaymentConnectionErrorCode {
  INVALID
}

input PaymentConnectionSubmitRedirectionInput {
  md: String!
  pares: String!
}

type PaymentConnectionSubmitRedirectionPayload {
  paymentConnection: PaymentConnection
  userErrors: [PaymentConnectionUserError!]!
}

input PaymentConnectionSubmitAdditionalPaymentDetailsInput {
  paymentDetailsInput: AdyenPaymentDetailsInput!
}

scalar AdyenPaymentDetailsInput

type PaymentConnectionSubmitAdditionalPaymentDetailsPayload {
  paymentConnection: PaymentConnection
  userErrors: [PaymentConnectionUserError!]!
}

input PaymentConnectionRegisterDirectDebitInput {
  successURL: String!
  failureURL: String!
}

type PaymentConnectionRegisterDirectDebitPayload {
  paymentConnection: PaymentConnection
  userErrors: [PaymentConnectionUserError!]!
}
